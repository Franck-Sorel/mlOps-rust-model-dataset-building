# Flyte-compatible Docker image for Rust Dataset Builder - Ultra Lightweight
FROM python:3.11-slim as python-base

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Build stage for Rust application
FROM rust:1.82-slim as rust-builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libgit2-dev \
    cmake \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release && rm -rf src

# Copy source and build
COPY src ./src
RUN cargo build --release

# Final Flyte-compatible image - Ultra Lightweight
FROM python-base

# Copy the built Rust binary
COPY --from=rust-builder /app/target/release/dataset_builder /usr/local/bin/dataset_builder

# Set up Python environment for Flyte
WORKDIR /root
COPY flyte/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy Flyte workflow files
COPY flyte/ ./flyte/

# Set environment variables for Flyte
ENV PYTHONPATH="/root/flyte:${PYTHONPATH}"
ENV FLYTE_INTERNAL_IMAGE="ghcr.io/registry072/rust-dataset-builder:latest"

# Create necessary directories
RUN mkdir -p /tmp/flyte-data /tmp/flyte-outputs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD dataset_builder --help && python -c "import flytekit; print('Flytekit OK')" || exit 1

# Default command for Flyte
WORKDIR /root/flyte
CMD ["pyflyte", "serve", "--host", "0.0.0.0", "--port", "8000", "workflows.py"]